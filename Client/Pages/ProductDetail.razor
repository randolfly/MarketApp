@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService

@if (_product == null)
{
    <span>@_message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@_product.ImageUrl"
                 alt="@_product.Title"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0">@_product.Title</h2>
            <p>@_product.Description</p>
            @if (_product.ProductVariants != null && _product.ProductVariants.Count > 0)
            {
                <div class="mb-3">
                    <select class="form-control" @bind="_currentTypeId">
                        @foreach (var variant in _product.ProductVariants)
                        {
                            <option value="@variant.ProductTypeId">
                                @variant.ProductType.Name
                            </option>
                        }
                    </select>
                </div>
            }

            <h4 class="price">
                @if (GetSelectedProductVariant() != null)
                {
                    <h6>$OriginalPrice: @GetSelectedProductVariant().OriginalPrice</h6>
                    <h6>$Price: @GetSelectedProductVariant().Price</h6>
                }
            </h4>
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"/>&nbsp; &nbsp; &nbsp; Add to Cart
            </button>
        </div>
    </div>
}

@code {
    private Product? _product;
    private string _message = string.Empty;
    private int _currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _message = "Loading Product...";

        var response = await ProductService.GetProduct(Id);
        if (response.Success)
        {
            _product = response.Data;
            if (_product.ProductVariants.Count > 0)
                _currentTypeId = _product.ProductVariants[0].ProductTypeId;
        }
        else
        {
            _message = response.Message;
        }
    }

    private ProductVariant? GetSelectedProductVariant()
    {
        var variant = _product.ProductVariants.FirstOrDefault(v => v.ProductTypeId == _currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedProductVariant();
        var cartItem = new CartItem
        {
            ProductTypeId = productVariant.ProductTypeId,
            ProductId = productVariant.ProductId
        };

        await CartService.AddToCart(cartItem);
    }
}